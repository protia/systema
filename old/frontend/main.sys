#include "common.inc"

def main: func(argc: four, argv: @[@[byte]]) returns four

    /* file names */
    def if_name: @[byte];
    def of_name: @[byte];

    /* file descriptors */
    def fin    : @FILE;
    def fout   : @FILE;

    /* flags/counters */
    def i      : four;
    def error  : four;

begin

    /* initialize error */
    error := 0;
    /* read arguments */
    for i from 0 to argc -1 do
        if argv@[i]@[0] == 'i' and
           argv@[i]@[1] == 'n' and
           argv@[i]@[2] == '='
        then
            /* input file */
            if_name := &argv@[i]@[3] as @[byte];
        endif;
        if argv@[i]@[0] == 'o' and
           argv@[i]@[1] == 'u' and
           argv@[i]@[2] == 't' and
           argv@[i]@[3] == '='
        then
            /* output file */
            of_name := &argv@[i]@[4] as @[byte];
        endif;
    loop;
    /* arguments are valid? */
    if if_name == NULL or of_name == NULL then
        fprintf(stderr, "Usage: %s in=<input-file> out=<out-file>\n", argv@[0]);
        error := 1;
    endif;
    /* attempt to open input file */
    if !error then
        fin := fopen(if_name, "r");
        if fin == NULL then
	    fprintf(stderr, "Can't open %s for read.\n", if_name);
	    error := -1;
        endif;
    endif;
    /* attempt to open output file */
    if !error then
        fout := fopen(of_name, "w");
        if fout == NULL then
            fprintf(stderr, "Can't open %s for write.\n", of_name);
            error:= -1;
        endif;
    endif;
    /* compile */
    if !error then
        /* initialize error */
        err_init();
        /* initialize symtab */
        symtab_init();
        /* initialize input layer */
        lexer_init(fin);
        /* initialize semantic */
        semantic_init();
        /* initialize output layer */
        emit_init(fout);
        /* start the parser */
        parse_file();
        /* get final error code */
        error := get_err();
        /* close the files */
        fclose(fin);
        fclose(fout);
    endif;
    /* done */
    return error;
end;
