#include "common.inc"

def cur_line   : [400 byte];
def line_size  : four;
def off        : four;

def file_name  : @[byte];
def lineno     : four;
def col        : four;
def last_col   : four;

def fd         : @FILE;
def has_ungetc : four;
def last_chr   : four;
def has_ungetl : four;

def lex        : lexeme_t;
def state      : four;

def ops        : [200 @[byte]];
def keywords   : [200 @[byte]];

def lexer_init: func(set_fd: @FILE)
    def i: four;
begin

    /* initialize ops */
    i := 0;
    ops[i++] := "[";
    ops[i++] := "]";
    ops[i++] := "(";
    ops[i++] := ")";
    ops[i++] := "{";
    ops[i++] := "}";
    ops[i++] := ";";
    ops[i++] := ".";
    ops[i++] := ",";
    ops[i++] := "..";
    ops[i++] := "...";
    ops[i++] := "++";
    ops[i++] := "--";
    ops[i++] := "&";
    ops[i++] := "@";
    ops[i++] := "*";
    ops[i++] := "+";
    ops[i++] := "-";
    ops[i++] := "~";
    ops[i++] := "!";
    ops[i++] := "/";
    ops[i++] := "%";
    ops[i++] := "<<";
    ops[i++] := ">>";
    ops[i++] := "<";
    ops[i++] := ">";
    ops[i++] := "<=";
    ops[i++] := ">=";
    ops[i++] := "==";
    ops[i++] := "!=";
    ops[i++] := "^";
    ops[i++] := "|";
    ops[i++] := "?";
    ops[i++] := ":";
    ops[i++] := ":=";
    ops[i++] := "*=";
    ops[i++] := "/=";
    ops[i++] := "%=";
    ops[i++] := "+=";
    ops[i++] := "-=";
    ops[i++] := "<<=";
    ops[i++] := ">>=";
    ops[i++] := "&=";
    ops[i++] := "^=";
    ops[i++] := "|=";
    ops[i++] := "=";
    ops[i++] := NULL;

    /* initialize keywords */
    i := 0;
    keywords[i++] := "def";
    keywords[i++] := "dec";
    keywords[i++] := "typ";
    keywords[i++] := "sub";
    keywords[i++] := "local";
    keywords[i++] := "as";
    keywords[i++] := "in";
    keywords[i++] := "code";
    keywords[i++] := "rodata";
    keywords[i++] := "data";
    keywords[i++] := "bss";
    keywords[i++] := "stack";
    keywords[i++] := "register";
    keywords[i++] := "byte";
    keywords[i++] := "twin";
    keywords[i++] := "four";
    keywords[i++] := "eigh";
    keywords[i++] := "func";
    keywords[i++] := "text";
    keywords[i++] := "record";
    keywords[i++] := "returns";
    keywords[i++] := "begin";
    keywords[i++] := "assembly";
    keywords[i++] := "sizeof";
    keywords[i++] := "typeof";
    keywords[i++] := "if";
    keywords[i++] := "unsigned";
    keywords[i++] := "and";
    keywords[i++] := "or";
    keywords[i++] := "then";
    keywords[i++] := "elsif";
    keywords[i++] := "else";
    keywords[i++] := "endif";
    keywords[i++] := "case";
    keywords[i++] := "when";
    keywords[i++] := "others";
    keywords[i++] := "esac";
    keywords[i++] := "for";
    keywords[i++] := "from";
    keywords[i++] := "down";
    keywords[i++] := "to";
    keywords[i++] := "step";
    keywords[i++] := "do";
    keywords[i++] := "while";
    keywords[i++] := "loop";
    keywords[i++] := "return";
    keywords[i++] := "end";
    keywords[i++] := NULL;

    /* initialize line info */
    strcpy(&cur_line, "");
    line_size := 0;
    off := 0;
    col := 0;
    last_col := 0;

    /* initialize file info */
    file_name := "dumb.c";
    lineno := 0;
    fd := set_fd;

    /* initialize unget info */
    has_ungetc := 0;
    has_ungetl := 0;

end;

def get_cur_line: func() returns @[byte]
begin
    return &cur_line;
end;

def get_off: func() returns four
begin
    return off;
end;

def get_file_name: func() returns @[byte]
begin
    return file_name;
end;

def get_lineno: func() returns four
begin
    return lineno;
end;

def get_col: func() returns four
begin
    return col;
end;

def get_char: func() returns four
    def ret : four;
    def i   : four;
    def eptr: @[byte];
begin
    ret := 0;
    if line_size == off then
        /* we need to read new line */
        if fgets(&cur_line, MAX_BUF-1, fd) == NULL then
            /* EOF */
            ret := EOF;
        else
            /* hash lines have special treatment */
            if cur_line[0] == '#' then
                /* parse hash line */
                lineno := strtol(&cur_line[2] as @[byte], &eptr, 10)-1;
                /* get file name */
                file_name := malloc(1024) as @[byte];
                i := 2;
                while eptr@[i] != '"' do
                    file_name@[i-2] := eptr@[i];
                    i++;
                loop;
                file_name@[i] := 0;
                /* get next token */
                ret := get_char();
            else
                line_size := strlen(&cur_line);
                last_col := col;
                off := 1;
                col := 1;
                lineno++;
                ret := cur_line[0];
            endif;
        endif;
    else
        ret := cur_line[off];
        off++;
        col++;
    endif;
    return ret;
end;

def next_char: func() returns four
begin
    if has_ungetc == 1 then
        has_ungetc := 0;
        col++;
    else
        last_chr := get_char();
    endif;
    return last_chr;
end;

def unread_char: func()
begin
    col--;
    if col == 0 then
        col := last_col;
        lineno--;
    endif;
    has_ungetc := 1;
end;

def isop: func(str: @[byte]) returns four
    def i    : four;
    def found: four;
begin
    found := 0;
    i := 0;
    while !found and ops[i] != NULL do
        if strcmp(ops[i], str) == 0 then
            found := 1;
        endif;
        i++;
    loop;
    return found;
end;

def iskeyword: func(str: @[byte]) returns four
    def i    : four;
    def found: four;
begin
    found := 0;
    i := 0;
    while !found and keywords[i] != NULL do
        if ! strcmp(keywords[i], str) then
            found := 1;
        endif;
    	i++;
    loop;
    return found;
end;

def isnum: func(chr: byte) returns four
begin
    return chr >= '0' and chr <= '9';
end;

def isoct: func(chr: byte) returns four
begin
    return chr >= '0' and chr <= '7';
end;

def ishex: func(chr: byte) returns four
begin
    return (chr >= '0' and chr <= '9')or
           (chr >= 'a' and chr <= 'f')or
           (chr >= 'A' and chr <= 'F');
end;

def isnondigit: func(chr: byte) returns four
begin
    return (chr >= 'a' and chr <= 'z') or
           (chr >= 'A' and chr <= 'Z') or
           (chr == '_');
end;

def get_lexeme: func()
    def pos   : four;
    def chr   : four;
    def f     : four;
    def escape: four;
begin
    /* initialize flags */
    pos    := 0;
    f      := 0;
    escape := 0;
    if has_ungetl then
        has_ungetl := 0;
    else
        /* get next character */
        chr := next_char();
        /* white space? */
        while isspace(chr) do
            chr := next_char();
        loop;
        /* lexeme contains at least this first char */
        lex.val[0] := chr;
        lex.val[1] := 0;
        /* reset f */
        f := 0;
        /* start at unknown state */
        state := STATE_START;
        /* loop over input characters to read full lexeme */
        while  !f /* ! done yet */ do
            /* check chr */
            case state
                when STATE_START:
                    if chr == '\'' then
                        /* read character */
                        state := STATE_CHAR;
                    elsif chr == '\"' then
                        /* read string */
                        state := STATE_STRING;
                    elsif chr == '/' then
                        /* comment or division */
                        state := STATE_COMMENT;
                    elsif isop(&lex.val) then
                        /* operator */
                        state := STATE_OP;
                    elsif isnum(chr) then
                        /* numeric */
                        state := STATE_NUM;
                    elsif isnondigit(chr) then
                        /* alphabetic */
                        state := STATE_ALPHA;
                    elsif chr == EOF then
                        /* end of file */
                        state := STATE_EOF;
                    else
                        /* invalid token */
                        f := 1;
                    endif;
                when STATE_CHAR:
                    if (pos == 2 and ! (lex.val[1] == '\\')) or pos == 3 then
                        if chr != '\'' then
                            /* invalid token */
                            unread_char();
                            f := 1;
                        else
                            /* done */
                            f := 2;
                        endif;
                    endif;
                    if ! f and chr == EOF then
                        /* invalid token */
                        unread_char();
                        f := 1;
                    endif;
                when STATE_STRING:
                    if chr == '\"' and ! escape then
                        /* done */
                        f := 2;
                    elsif chr == EOF then
                        /* invalid token */
                        unread_char();
                        f := 1;
                    elsif chr == '\n' then
                        /* invalid token */
                        unread_char();
                        f := 1;
                    endif;
                    if escape then
                        escape := 0;
                    elsif chr == '\\' then
                        escape := 1;
                    endif;
                when STATE_COMMENT:
                    if pos == 1 then
                        /* time to decide */
                        if chr == '/' or chr == '*' then
                            /* comment -- no special handling */
                        elsif chr == '=' then
                            /* /:= operator */
                            f := 2;
                        else
                            /* / operator */
                            unread_char();
                            f := 2;
                        endif;
                    else
                        if  lex.val[1]     == '*' and
                            chr            == '/' and
                            lex.val[pos-1] == '*'
                        then
                            /* closing of multi-line comment */
                            f := 2;
                        elsif lex.val[1] == '/' and
                              chr        == '\n'
                        then
                            /* closing of single-line comment */
                            f := 2;
                        elsif lex.val[1] == '*' and
                              chr        == EOF
                        then
                            /* invalid token */
                            unread_char();
                            f := 1;
                        endif;
                    endif;
                when STATE_OP:
                    /* append char and test */
                    lex.val[pos] := chr;
                    lex.val[pos+1] := 0;
                    if !isop(&lex.val) then
                        /* done */
                        unread_char();
                        f := 2;
                    endif;
                when STATE_ALPHA:
                    if ! isnondigit(chr) and ! isnum(chr) then
                        /* done */
                        unread_char();
                        f := 2;
                    endif;
                when STATE_NUM:
                    if ! isnum(chr) then
                        if  (chr == 'o' or chr == 'O') and
                            pos == 1 and
                            lex.val[0] == '0'
                        then
                            /* octal number */
                            state := STATE_OCT;
                        elsif (chr == 'x' or chr == 'X') and
                              pos == 1 and
                              lex.val[0] == '0'
                        then
                            /* hexadecimal number */
                            state := STATE_HEX;
                        else
                            /* done */
                            unread_char();
                            f := 2;
                        endif;
                    endif;
                when STATE_OCT:
                    if ! isoct(chr) then
                        unread_char();
                        if pos > 2 then
                            /* done */
                            f := 2;
                        else
                            /* invalid token */
                            unread_char();
                            f := 1;
                        endif;
                    endif;
                when STATE_HEX:
                    if ! ishex(chr) then
                        unread_char();
                        if pos > 2 then
                            /* done */
                            f := 2;
                        else
                            /* invalid token */
                            unread_char();
                            f := 1;
                        endif;
                    endif;
                when STATE_EOF:
                    /* done */
                    f := 2;
            esac;
            /* what's next? */
            if f == 0 then
                /* store chr and move to next */
                lex.val[pos++] := chr;
                chr := next_char();
            elsif f == 1 then
                /* invalid token */
                if pos then
                    lex.val[pos] := 0;
                else
                    pos := 0;
                endif;
                lex.type := LEX_INVALID;
                print_err("invalid token: %s", &lex.val as eigh);
            else
                /* append to token if string or char */
                if state == STATE_CHAR or state == STATE_STRING then
                    /* append current chr */
                    lex.val[pos++] := chr;
                    lex.val[pos] := 0;
                elsif state == STATE_COMMENT then
                    /* update lexeme value depending on state */
                    if pos == 1 then
                        if chr == '=' then
                            lex.val[pos++] := chr;
                        endif;
                    else
                        if chr == '/' then
                            lex.val[pos++] := chr;
                        endif;
                    endif;
                    lex.val[pos] := 0;
                elsif state == STATE_EOF then
                    /* put empty lexeme */
                    lex.val[0] := 0;
                else
                    /* append 0 */
                    lex.val[pos] := 0;
                endif;
                /* determine type of lexeme */
                case state
                    when STATE_CHAR:
                        lex.type := LEX_CHAR_LITERAL;
                    when STATE_STRING:
                        lex.type := LEX_STR_LITERAL;
                    when STATE_COMMENT:
                        if lex.val[1] == '*' or lex.val[1] == '/' then
                            lex.type := LEX_COMMENT;
                            get_lexeme();
                        else
                            lex.type := LEX_OP;
                        endif;
                    when STATE_OP:
                        lex.type := LEX_OP;
                    when STATE_ALPHA:
                        if iskeyword(&lex.val) then
                            lex.type := LEX_KEYWORD;
                        else
                            lex.type := LEX_IDENTIFIER;
                        endif;
                    when STATE_NUM, STATE_OCT, STATE_HEX:
                        lex.type := LEX_INT_LITERAL;
                    when STATE_EOF:
                        lex.type := LEX_EOF;
                esac;
            endif;
        loop;
        //fprintf(stderr, "lexeme: %s\n", &lex.val);
    endif;
end;

def unget_lexeme: func()
begin
    has_ungetl := 1;
end;
