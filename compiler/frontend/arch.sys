#include <common.inc>

dec emit_fd: @FILE; /* from emit.c */
def regs     : [1000 reg_t];

def arch_init: func()
    def i : four;
begin
    i := 0;

    regs[i].name :=    "%al"; regs[i++].size := 1;
    regs[i].name :=    "%bl"; regs[i++].size := 1;
    regs[i].name :=    "%cl"; regs[i++].size := 1;
    regs[i].name :=    "%dl"; regs[i++].size := 1;
    regs[i].name :=    "%ah"; regs[i++].size := 1;
    regs[i].name :=    "%bh"; regs[i++].size := 1;
    regs[i].name :=    "%ch"; regs[i++].size := 1;
    regs[i].name :=    "%dh"; regs[i++].size := 1;
    regs[i].name :=   "%sil"; regs[i++].size := 1;
    regs[i].name :=   "%dil"; regs[i++].size := 1;
    regs[i].name :=   "%bpl"; regs[i++].size := 1;
    regs[i].name :=   "%spl"; regs[i++].size := 1;
    regs[i].name :=   "%r8b"; regs[i++].size := 1;
    regs[i].name :=   "%r9b"; regs[i++].size := 1;
    regs[i].name :=  "%r10b"; regs[i++].size := 1;
    regs[i].name :=  "%r11b"; regs[i++].size := 1;
    regs[i].name :=  "%r12b"; regs[i++].size := 1;
    regs[i].name :=  "%r13b"; regs[i++].size := 1;
    regs[i].name :=  "%r14b"; regs[i++].size := 1;
    regs[i].name :=  "%r15b"; regs[i++].size := 1;

    regs[i].name :=    "%ax"; regs[i++].size := 2;
    regs[i].name :=    "%bx"; regs[i++].size := 2;
    regs[i].name :=    "%cx"; regs[i++].size := 2;
    regs[i].name :=    "%dx"; regs[i++].size := 2;
    regs[i].name :=    "%si"; regs[i++].size := 2;
    regs[i].name :=    "%di"; regs[i++].size := 2;
    regs[i].name :=    "%bp"; regs[i++].size := 2;
    regs[i].name :=    "%sp"; regs[i++].size := 2;
    regs[i].name :=   "%r8w"; regs[i++].size := 2;
    regs[i].name :=   "%r9w"; regs[i++].size := 2;
    regs[i].name :=  "%r10w"; regs[i++].size := 2;
    regs[i].name :=  "%r11w"; regs[i++].size := 2;
    regs[i].name :=  "%r12w"; regs[i++].size := 2;
    regs[i].name :=  "%r13w"; regs[i++].size := 2;
    regs[i].name :=  "%r14w"; regs[i++].size := 2;
    regs[i].name :=  "%r15w"; regs[i++].size := 2;

    regs[i].name :=   "%eax"; regs[i++].size := 4;
    regs[i].name :=   "%ebx"; regs[i++].size := 4;
    regs[i].name :=   "%ecx"; regs[i++].size := 4;
    regs[i].name :=   "%edx"; regs[i++].size := 4;
    regs[i].name :=   "%esi"; regs[i++].size := 4;
    regs[i].name :=   "%edi"; regs[i++].size := 4;
    regs[i].name :=   "%ebp"; regs[i++].size := 4;
    regs[i].name :=   "%esp"; regs[i++].size := 4;
    regs[i].name :=   "%r8d"; regs[i++].size := 4;
    regs[i].name :=   "%r9d"; regs[i++].size := 4;
    regs[i].name :=  "%r10d"; regs[i++].size := 4;
    regs[i].name :=  "%r11d"; regs[i++].size := 4;
    regs[i].name :=  "%r12d"; regs[i++].size := 4;
    regs[i].name :=  "%r13d"; regs[i++].size := 4;
    regs[i].name :=  "%r14d"; regs[i++].size := 4;
    regs[i].name :=  "%r15d"; regs[i++].size := 4;

    regs[i].name :=   "%rax"; regs[i++].size := 8;
    regs[i].name :=   "%rbx"; regs[i++].size := 8;
    regs[i].name :=   "%rcx"; regs[i++].size := 8;
    regs[i].name :=   "%rdx"; regs[i++].size := 8;
    regs[i].name :=   "%rsi"; regs[i++].size := 8;
    regs[i].name :=   "%rdi"; regs[i++].size := 8;
    regs[i].name :=   "%rbp"; regs[i++].size := 8;
    regs[i].name :=   "%rsp"; regs[i++].size := 8;
    regs[i].name :=    "%r8"; regs[i++].size := 8;
    regs[i].name :=    "%r9"; regs[i++].size := 8;
    regs[i].name :=   "%r10"; regs[i++].size := 8;
    regs[i].name :=   "%r11"; regs[i++].size := 8;
    regs[i].name :=   "%r12"; regs[i++].size := 8;
    regs[i].name :=   "%r13"; regs[i++].size := 8;
    regs[i].name :=   "%r14"; regs[i++].size := 8;
    regs[i].name :=   "%r15"; regs[i++].size := 8;

    regs[i].name :=    "%cs"; regs[i++].size := 2;
    regs[i].name :=    "%ds"; regs[i++].size := 2;
    regs[i].name :=    "%es"; regs[i++].size := 2;
    regs[i].name :=    "%fs"; regs[i++].size := 2;
    regs[i].name :=    "%gs"; regs[i++].size := 2;
    regs[i].name :=    "%ss"; regs[i++].size := 2;

    regs[i].name :=   "%cr0"; regs[i++].size := 8;
    regs[i].name :=   "%cr1"; regs[i++].size := 8;
    regs[i].name :=   "%cr2"; regs[i++].size := 8;
    regs[i].name :=   "%cr3"; regs[i++].size := 8;
    regs[i].name :=   "%cr4"; regs[i++].size := 8;
    regs[i].name :=   "%cr5"; regs[i++].size := 8;
    regs[i].name :=   "%cr6"; regs[i++].size := 8;
    regs[i].name :=   "%cr7"; regs[i++].size := 8;
    regs[i].name :=   "%cr8"; regs[i++].size := 8;

    regs[i].name :=   "%dr0"; regs[i++].size := 8;
    regs[i].name :=   "%dr1"; regs[i++].size := 8;
    regs[i].name :=   "%dr2"; regs[i++].size := 8;
    regs[i].name :=   "%dr3"; regs[i++].size := 8;
    regs[i].name :=   "%dr6"; regs[i++].size := 8;
    regs[i].name :=   "%dr7"; regs[i++].size := 8;

    regs[i].name :=   "%tr3"; regs[i++].size := 4;
    regs[i].name :=   "%tr4"; regs[i++].size := 4;
    regs[i].name :=   "%tr5"; regs[i++].size := 4;
    regs[i].name :=   "%tr6"; regs[i++].size := 4;
    regs[i].name :=   "%tr7"; regs[i++].size := 4;

    regs[i].name :=   "%mm0"; regs[i++].size := 8;
    regs[i].name :=   "%mm1"; regs[i++].size := 8;
    regs[i].name :=   "%mm2"; regs[i++].size := 8;
    regs[i].name :=   "%mm3"; regs[i++].size := 8;
    regs[i].name :=   "%mm4"; regs[i++].size := 8;
    regs[i].name :=   "%mm5"; regs[i++].size := 8;
    regs[i].name :=   "%mm6"; regs[i++].size := 8;
    regs[i].name :=   "%mm7"; regs[i++].size := 8;

    regs[i].name := "%xmm00"; regs[i++].size := 16;
    regs[i].name := "%xmm01"; regs[i++].size := 16;
    regs[i].name := "%xmm02"; regs[i++].size := 16;
    regs[i].name := "%xmm03"; regs[i++].size := 16;
    regs[i].name := "%xmm04"; regs[i++].size := 16;
    regs[i].name := "%xmm05"; regs[i++].size := 16;
    regs[i].name := "%xmm06"; regs[i++].size := 16;
    regs[i].name := "%xmm07"; regs[i++].size := 16;
    regs[i].name := "%xmm08"; regs[i++].size := 16;
    regs[i].name := "%xmm09"; regs[i++].size := 16;
    regs[i].name := "%xmm10"; regs[i++].size := 16;
    regs[i].name := "%xmm11"; regs[i++].size := 16;
    regs[i].name := "%xmm12"; regs[i++].size := 16;
    regs[i].name := "%xmm13"; regs[i++].size := 16;
    regs[i].name := "%xmm14"; regs[i++].size := 16;
    regs[i].name := "%xmm15"; regs[i++].size := 16;

    regs[i].name := NULL;
    regs[i].size := 0;

end;

def arch_sp_fmt: func(str: @[byte], offset: four)
begin
    itoa(str, offset);
    strcat(str, "(%rbp)");
end;

def arch_get_reg: func(usage: four, indx: four) returns four
    def ret: four;
begin
    if usage == REG_ACC then
        /* return accumulator */
        ret := indx;
    elsif usage == REG_IDX then
        /* return index register */
        ret := 4+indx;
    else
        ret := -1;
    endif;
    return ret;
end;

def arch_get_reg_name: func(reg: four, size: four) returns @[byte]
    def name: @[byte];
begin
    name := "";
    if reg == 0 then
        if size == 1 then
            name := "%al";
        elsif size == 2 then
            name := "%ax";
        elsif size == 4 then
            name := "%eax";
        elsif size == 8 then
            name := "%rax";
        endif;
    elsif reg == 1 then
        if size == 1 then
            name := "%bl";
        elsif size == 2 then
            name := "%bx";
        elsif size == 4 then
            name := "%ebx";
        elsif size == 8 then
            name := "%rbx";
        endif;
    elsif reg == 2 then
        if size == 1 then
            name := "%cl";
        elsif size == 2 then
            name := "%cx";
        elsif size == 4 then
            name := "%ecx";
        elsif size == 8 then
            name := "%rcx";
        endif;
    elsif reg == 3 then
        if size == 1 then
            name := "%dl";
        elsif size == 2 then
            name := "%dx";
        elsif size == 4 then
            name := "%edx";
        elsif size == 8 then
            name := "%rdx";
        endif;
    elsif reg == 4 then
        if size == 2 then
            name := "%si";
        elsif size == 4 then
            name := "%esi";
        elsif size == 8 then
            name := "%rsi";
        endif;
    elsif reg == 5 then
        if size == 2 then
            name := "%di";
        elsif size == 4 then
            name := "%edi";
        elsif size == 8 then
            name := "%rdi";
        endif;
    endif;
    return name;
end;

def arch_get_reg_size: func(reg_name: @[byte]) returns four
    def i: four;
begin
    i := 0;
    while regs[i].name and strcmp(regs[i].name, reg_name) do
        i++;
    loop;
    return regs[i].size;
end;

def arch_func_entry: func(stack_sym: @[byte])
begin
    fprintf(emit_fd, "\tpushq  %%rbp\n");
    fprintf(emit_fd, "\tmovq   %%rsp, %%rbp\n");
    fprintf(emit_fd, "\tsubq   $%s, %%rsp\n", stack_sym);
end;

def arch_func_leave: func(stack_sym: @[byte])
begin
    if get_stack_size() % 16 then
        get_new_addr(get_stack_size() % 16);
    endif;
    fprintf(emit_fd, "\taddq   $%s, %%rsp\n", stack_sym);
    fprintf(emit_fd, "\tpopq   %%rbp\n");
    fprintf(emit_fd, "\tret\n");
end;

def arch_jmp: func(lbl: @[byte])
begin
    fprintf(emit_fd, "\tjmp    %s\n", lbl);
end;

def arch_loadb_literal: func(literal: byte, reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 1);
    fprintf(emit_fd, "\tmovb   $%d, %s\n", literal, reg_name);
end;

def arch_loadh_literal: func(literal: twin, reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tmovw   $%d, %s\n", literal, reg_name);
end;

def arch_loadw_literal: func(literal: four, reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovl   $%ld, %s\n", literal, reg_name);
end;

def arch_loadl_literal: func(literal: eigh, reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovq   $%lld, %s\n", literal, reg_name);
end;

def arch_loadb: func(addr: @[byte], reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 1);
    fprintf(emit_fd, "\tmovb   %s, %s\n", addr, reg_name);
end;

def arch_loadh: func(addr: @[byte], reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tmovw   %s, %s\n", addr, reg_name);
end;

def arch_loadw: func(addr: @[byte], reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovl   %s, %s\n", addr, reg_name);
end;

def arch_loadl: func(addr: @[byte], reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovq   %s, %s\n", addr, reg_name);
end;

def arch_loadb_indx: func(indx_reg: four, reg: four)
    def indx_reg_name: @[byte];
    def reg_name     : @[byte];
begin
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    reg_name := arch_get_reg_name(reg, 1);
    fprintf(emit_fd, "\tmovb   (%s), %s\n", indx_reg_name, reg_name);
end;

def arch_loadh_indx: func(indx_reg: four, reg: four)
    def indx_reg_name: @[byte];
    def reg_name     : @[byte];
begin
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tmovw   (%s), %s\n", indx_reg_name, reg_name);
end;

def arch_loadw_indx: func(indx_reg: four, reg: four)
    def indx_reg_name: @[byte];
    def reg_name     : @[byte];
begin
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovl   (%s), %s\n", indx_reg_name, reg_name);
end;

def arch_loadl_indx: func(indx_reg: four, reg: four)
    def indx_reg_name: @[byte];
    def reg_name     : @[byte];
begin
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovq   (%s), %s\n", indx_reg_name, reg_name);
end;

def arch_leal: func(addr: @[byte], reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tleaq   %s, %s\n", addr, reg_name);
end;

def arch_storeb: func(reg: four, addr: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 1);
    fprintf(emit_fd, "\tmovb   %s, %s\n", reg_name, addr);
end;

def arch_storeh: func(reg: four, addr: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tmovw   %s, %s\n", reg_name, addr);
end;

def arch_storew: func(reg: four, addr: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovl   %s, %s\n", reg_name, addr);
end;

def arch_storel: func(reg: four, addr: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovq   %s, %s\n", reg_name, addr);
end;

def arch_storeb_indx: func(reg: four, indx_reg: four)
    def reg_name     : @[byte];
    def indx_reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 1);
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    fprintf(emit_fd, "\tmovb   %s, (%s)\n", reg_name, indx_reg_name);
end;

def arch_storeh_indx: func(reg: four, indx_reg: four)
    def reg_name     : @[byte];
    def indx_reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    fprintf(emit_fd, "\tmovw   %s, (%s)\n", reg_name, indx_reg_name);
end;

def arch_storew_indx: func(reg: four, indx_reg: four)
    def reg_name     : @[byte];
    def indx_reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    fprintf(emit_fd, "\tmovl   %s, (%s)\n", reg_name, indx_reg_name);
end;

def arch_storel_indx: func(reg: four, indx_reg: four)
    def reg_name     : @[byte];
    def indx_reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    indx_reg_name := arch_get_reg_name(indx_reg, 8);
    fprintf(emit_fd, "\tmovq   %s, (%s)\n", reg_name, indx_reg_name);
end;

def arch_extbh: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 1);
    reg_name2 := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tmovsbw %s, %s\n", reg_name1, reg_name2);
end;

def arch_extbw: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 1);
    reg_name2 := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovsbl %s, %s\n", reg_name1, reg_name2);
end;

def arch_extbl: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 1);
    reg_name2 := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovsbq %s, %s\n", reg_name1, reg_name2);
end;

def arch_exthw: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 2);
    reg_name2 := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovswl %s, %s\n", reg_name1, reg_name2);
end;

def arch_exthl: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 2);
    reg_name2 := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovswq %s, %s\n", reg_name1, reg_name2);
end;

def arch_extwl: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 4);
    reg_name2 := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovslq %s, %s\n", reg_name1, reg_name2);
end;

def arch_extbh_zero: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 1);
    reg_name2 := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tmovzbw %s, %s\n", reg_name1, reg_name2);
end;

def arch_extbw_zero: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 1);
    reg_name2 := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovzbl %s, %s\n", reg_name1, reg_name2);
end;

def arch_extbl_zero: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 1);
    reg_name2 := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovzbq %s, %s\n", reg_name1, reg_name2);
end;

def arch_exthw_zero: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 2);
    reg_name2 := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovzwl %s, %s\n", reg_name1, reg_name2);
end;

def arch_exthl_zero: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 2);
    reg_name2 := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tmovzwq %s, %s\n", reg_name1, reg_name2);
end;

def arch_extwl_zero: func(reg: four)
    def reg_name1: @[byte];
    def reg_name2: @[byte];
begin
    reg_name1 := arch_get_reg_name(reg, 4);
    reg_name2 := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tmovl   %s, %s\n", reg_name1, reg_name2);
end;

def arch_addb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\taddb   %s, %s\n", src_name, dest_name);
end;

def arch_addh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  2);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\taddw   %s, %s\n", src_name, dest_name);
end;

def arch_addw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  4);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\taddl   %s, %s\n", src_name, dest_name);
end;

def arch_addl: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  8);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\taddq   %s, %s\n", src_name, dest_name);
end;

def arch_subb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\tsubb   %s, %s\n", src_name, dest_name);
end;

def arch_subh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  2);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\tsubw   %s, %s\n", src_name, dest_name);
end;

def arch_subw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  4);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\tsubl   %s, %s\n", src_name, dest_name);
end;

def arch_subl: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  8);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\tsubq   %s, %s\n", src_name, dest_name);
end;

def arch_mulb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name  := arch_get_reg_name(src_reg,  1);
    fprintf(emit_fd, "\tmulb   %s\n", src_name);
end;

def arch_mulh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name  := arch_get_reg_name(src_reg,  2);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tmulw   %s\n", src_name);
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_mulw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name  := arch_get_reg_name(src_reg,  4);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tmull   %s\n", src_name);
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_mull: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name  := arch_get_reg_name(src_reg,  8);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tmulq   %s\n", src_name);
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_divb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 1);
    fprintf(emit_fd, "\tmovsbw %%al, %%ax\n"); /* sign extend */
    fprintf(emit_fd, "\tdivb   %s\n", src_name);
end;

def arch_divh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 2);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tcwd\n"); /* sign extend */
    fprintf(emit_fd, "\tdivw   %s\n", src_name);
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_divw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 4);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tcdq\n"); /* sign extend */
    fprintf(emit_fd, "\tdivl   %s\n", src_name);
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_divl: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 8);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tcqo\n"); /* sign extend */
    fprintf(emit_fd, "\tdivq   %s\n", src_name);
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_modb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 1);
    fprintf(emit_fd, "\tmovsbw %%al, %%ax\n"); /* sign extend */
    fprintf(emit_fd, "\tdivb   %s\n", src_name);
    fprintf(emit_fd, "\tmovb   %%ah, %%al\n");
end;

def arch_modh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 2);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tcwd\n"); /* sign extend */
    fprintf(emit_fd, "\tdivw   %s\n", src_name);
    fprintf(emit_fd, "\tmovw   %%dx, %%ax\n");
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_modw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 4);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tcdq\n"); /* sign extend */
    fprintf(emit_fd, "\tdivl   %s\n", src_name);
    fprintf(emit_fd, "\tmovl   %%edx, %%eax\n");
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_modl: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
begin
    /* src_reg is guaranteed to be BX, while dest_reg is AX */
    src_name := arch_get_reg_name(src_reg, 8);
    fprintf(emit_fd, "\tpushq  %%rdx\n");
    fprintf(emit_fd, "\tcqo\n"); /* sign extend */
    fprintf(emit_fd, "\tdivq   %s\n", src_name);
    fprintf(emit_fd, "\tmovq   %%rdx, %%rax\n");
    fprintf(emit_fd, "\tpopq   %%rdx\n");
end;

def arch_notb: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg,  1);
    fprintf(emit_fd, "\tnotb   %s\n", reg_name);
end;

def arch_noth: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg,  2);
    fprintf(emit_fd, "\tnotw   %s\n", reg_name);
end;

def arch_notw: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg,  4);
    fprintf(emit_fd, "\tnotl   %s\n", reg_name);
end;

def arch_notl: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg,  8);
    fprintf(emit_fd, "\tnotq   %s\n", reg_name);
end;

def arch_andb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\tandb   %s, %s\n", src_name, dest_name);
end;

def arch_andh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  2);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\tandw   %s, %s\n", src_name, dest_name);
end;

def arch_andw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  4);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\tandl   %s, %s\n", src_name, dest_name);
end;

def arch_andl: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  8);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\tandq   %s, %s\n", src_name, dest_name);
end;

def arch_eorb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\torb    %s, %s\n", src_name, dest_name);
end;

def arch_eorh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  2);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\torw    %s, %s\n", src_name, dest_name);
end;

def arch_eorw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  4);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\torl    %s, %s\n", src_name, dest_name);
end;

def arch_eorl: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  8);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\torq    %s, %s\n", src_name, dest_name);
end;

def arch_xorb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\txorb   %s, %s\n", src_name, dest_name);
end;

def arch_xorh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  2);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\txorw   %s, %s\n", src_name, dest_name);
end;

def arch_xorw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  4);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\txorl   %s, %s\n", src_name, dest_name);
end;

def arch_xorl: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  8);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\txorq   %s, %s\n", src_name, dest_name);
end;

def arch_sllb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshlb   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_sllh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshlw   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_sllw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshll   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_slll: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshlq   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_srlb: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshrb   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_srlh: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshrw   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_srlw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshrl   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_srll: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tshrq   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_srab: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 1);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tsarb   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_srah: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 2);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tsarw   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_sraw: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 4);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tsarl   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_sral: func(src_reg: four, dest_reg: four)
    def src_name : @[byte];
    def dest_name: @[byte];
begin
    src_name  := arch_get_reg_name(src_reg,  1);
    dest_name := arch_get_reg_name(dest_reg, 8);
    fprintf(emit_fd, "\tpushw  %%cx\n");
    fprintf(emit_fd, "\tmovb   %s, %%cl\n", src_name);
    fprintf(emit_fd, "\tsarq   %%cl, %s\n", dest_name);
    fprintf(emit_fd, "\tpopw   %%cx\n");
end;

def arch_beqb: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tje     %s\n", lbl);
end;

def arch_beqh: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tje     %s\n", lbl);
end;

def arch_beqw: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tje     %s\n", lbl);
end;

def arch_beql: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tje     %s\n", lbl);
end;

def arch_bneb: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjne    %s\n", lbl);
end;

def arch_bneh: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjne    %s\n", lbl);
end;

def arch_bnew: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjne    %s\n", lbl);
end;

def arch_bnel: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjne    %s\n", lbl);
end;

def arch_bgtb: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjg     %s\n", lbl);
end;

def arch_bgth: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjg     %s\n", lbl);
end;

def arch_bgtw: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjg     %s\n", lbl);
end;

def arch_bgtl: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjg     %s\n", lbl);
end;

def arch_bgeb: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjge    %s\n", lbl);
end;

def arch_bgeh: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjge    %s\n", lbl);
end;

def arch_bgew: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjge    %s\n", lbl);
end;

def arch_bgel: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjge    %s\n", lbl);
end;

def arch_bltb: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjl     %s\n", lbl);
end;

def arch_blth: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjl     %s\n", lbl);
end;

def arch_bltw: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjl     %s\n", lbl);
end;

def arch_bltl: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjl     %s\n", lbl);
end;

def arch_bleb: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjle    %s\n", lbl);
end;

def arch_bleh: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjle    %s\n", lbl);
end;

def arch_blew: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjle    %s\n", lbl);
end;

def arch_blel: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjle    %s\n", lbl);
end;

def arch_bgtb_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tja     %s\n", lbl);
end;

def arch_bgth_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tja     %s\n", lbl);
end;

def arch_bgtw_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tja     %s\n", lbl);
end;

def arch_bgtl_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tja     %s\n", lbl);
end;

def arch_bgeb_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjae    %s\n", lbl);
end;

def arch_bgeh_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjae    %s\n", lbl);
end;

def arch_bgew_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjae    %s\n", lbl);
end;

def arch_bgel_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjae    %s\n", lbl);
end;

def arch_bltb_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjb     %s\n", lbl);
end;

def arch_blth_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjb     %s\n", lbl);
end;

def arch_bltw_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjb     %s\n", lbl);
end;

def arch_bltl_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjb     %s\n", lbl);
end;

def arch_bleb_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 1);
    reg2_name := arch_get_reg_name(reg2, 1);
    fprintf(emit_fd, "\tcmpb   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjbe    %s\n", lbl);
end;

def arch_bleh_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 2);
    reg2_name := arch_get_reg_name(reg2, 2);
    fprintf(emit_fd, "\tcmpw   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjbe    %s\n", lbl);
end;

def arch_blew_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 4);
    reg2_name := arch_get_reg_name(reg2, 4);
    fprintf(emit_fd, "\tcmpl   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjbe    %s\n", lbl);
end;

def arch_blel_unsigned: func(reg1: four, reg2: four, lbl: @[byte])
    def reg1_name: @[byte];
    def reg2_name: @[byte];
begin
    reg1_name := arch_get_reg_name(reg1, 8);
    reg2_name := arch_get_reg_name(reg2, 8);
    fprintf(emit_fd, "\tcmpq   %s, %s\n", reg2_name, reg1_name);
    fprintf(emit_fd, "\tjbe    %s\n", lbl);
end;

def arch_bzeb: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 1);
    fprintf(emit_fd, "\ttestb  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjz     %s\n", lbl);
end;

def arch_bzeh: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\ttestw  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjz     %s\n", lbl);
end;

def arch_bzew: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\ttestl  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjz     %s\n", lbl);
end;

def arch_bzel: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\ttestq  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjz     %s\n", lbl);
end;

def arch_bnzb: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 1);
    fprintf(emit_fd, "\ttestb  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjnz    %s\n", lbl);
end;

def arch_bnzh: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\ttestw  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjnz    %s\n", lbl);
end;

def arch_bnzw: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\ttestl  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjnz    %s\n", lbl);
end;

def arch_bnzl: func(reg: four, lbl: @[byte])
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\ttestq  %s, %s\n", reg_name, reg_name);
    fprintf(emit_fd, "\tjnz    %s\n", lbl);
end;

def arch_pushb: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tpushw  %s\n", reg_name);
end;

def arch_pushh: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tpushw  %s\n", reg_name);
end;

def arch_pushw: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tpushl  %s\n", reg_name);
end;

def arch_pushl: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tpushq  %s\n", reg_name);
end;

def arch_popb: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tpopw   %s\n", reg_name);
end;

def arch_poph: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 2);
    fprintf(emit_fd, "\tpopw   %s\n", reg_name);
end;

def arch_popw: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 4);
    fprintf(emit_fd, "\tpopl   %s\n", reg_name);
end;

def arch_popl: func(reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    fprintf(emit_fd, "\tpopq   %s\n", reg_name);
end;

def arch_adjust_stack: func(stack_size: four)
begin
    fprintf(emit_fd, "\tlea    -%d(%%rbp), %%rsp\n", stack_size);
end;

def arch_loadarg: func(arg: four, reg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    if arg == 0 then
        fprintf(emit_fd, "\tmovq   %%rdi, %s\n", reg_name);
    elsif arg == 1 then
        fprintf(emit_fd, "\tmovq   %%rsi, %s\n", reg_name);
    elsif arg == 2 then
        fprintf(emit_fd, "\tmovq   %%rdx, %s\n", reg_name);
    elsif arg == 3 then
        fprintf(emit_fd, "\tmovq   %%rcx, %s\n", reg_name);
    elsif arg == 4 then
        fprintf(emit_fd, "\tmovq   %%r8, %s\n", reg_name);
    elsif arg == 5 then
        fprintf(emit_fd, "\tmovq   %%r9, %s\n", reg_name);
    else
        fprintf(emit_fd, "\tmovq   %d(%%rbp), %s\n", (arg-4)*8, reg_name);
    endif;
end;

def arch_pusharg: func(reg: four, arg: four)
    def reg_name: @[byte];
begin
    reg_name := arch_get_reg_name(reg, 8);
    if arg == 0 then
        fprintf(emit_fd, "\tmovq   %s, %%rdi\n", reg_name);
    elsif arg == 1 then
        fprintf(emit_fd, "\tmovq   %s, %%rsi\n", reg_name);
    elsif arg == 2 then
        fprintf(emit_fd, "\tmovq   %s, %%rdx\n", reg_name);
    elsif arg == 3 then
        fprintf(emit_fd, "\tmovq   %s, %%rcx\n", reg_name);
    elsif arg == 4 then
        fprintf(emit_fd, "\tmovq   %s, %%r8\n", reg_name);
    elsif arg == 5 then
        fprintf(emit_fd, "\tmovq   %s, %%r9\n", reg_name);
    else
        fprintf(emit_fd, "\tpushq  %s\n", reg_name);
    endif;
end;

def arch_poparg: func(arg: four, reg: four)
begin
    if arg > 5 then
        fprintf(emit_fd, "\tadd   $8, %%esp\n");
    endif;
end;

def arch_call: func(func_addr: @[byte])
begin
    fprintf(emit_fd, "\tmovl   $0, %%eax\n");
    fprintf(emit_fd, "\tcall   %s\n", func_addr);
end;

def arch_call_indir: func(func_addr: @[byte])
begin
    fprintf(emit_fd, "\tmovl   $0, %%eax\n");
    fprintf(emit_fd, "\tcall   *%s\n", func_addr);
end;

def arch_nop: func()
begin
    fprintf(emit_fd, "\tnop\n");
end;
