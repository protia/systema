#include <common.inc>

def type_cast: func(before: @expr_t, new_type: @type_t) returns @expr_t
    def after    : @expr_t;
    def from_spec: four;
    def to_spec  : four;
    def reg      : four;
begin
    /* initialize variables */
    after := alloc_expr();
    reg   := emit_get_reg(REG_ACC, 0);
    /* get types */
    from_spec := before@.type@.specifier;
    to_spec   := new_type@.specifier;
    /* perform casting */
    if before@.literal then
        after@.literal := 1;
        after@.type    := new_type;
        literal_type_cast(before, after);
        if from_spec <= TYPE_DOBL and to_spec == TYPE_PTR then
            after@.addr := NULL; /* not string literal */
        endif;
    elsif type_size(before@.type) == type_size(new_type) then
        /* no need to perform casting */
        after@.type    := new_type;
        after@.addr    := before@.addr;
        after@.indir   := before@.indir;
        after@.literal := 0;
    else
        after@.literal := 0;
        after@.indir   := 0; /* indirection is solved */
        after@.type    := new_type;
        after@.addr    := get_new_addr(type_size(after@.type));
        /* perform casting */
        if ((from_spec>=TYPE_BYTE and from_spec<=TYPE_DOBL) or
            from_spec==TYPE_PTR)
           and
           ((to_spec>=TYPE_BYTE and to_spec<=TYPE_DOBL) or
            to_spec==TYPE_PTR)
        then
            /* integer/ptr to integer/ptr casting */
            emit_load(before, reg);
            /* extend */
            if get_unsignedf() then
                emit_extend_unsigned(before@.type, after@.type, reg);
            else
                emit_extend_signed(before@.type, after@.type, reg);
            endif;
            /* store the casted value */
            emit_store(reg, after);
        else
            print_err("unsupported types for casting", 0);
        endif;
    endif;
    return after;
end;
