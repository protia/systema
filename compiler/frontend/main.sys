#include <common.inc>

def main: func(argc: four, argv: @[@[byte]]) returns four

    /* file names */
    def if_name: @[byte];
    def of_name: @[byte];

    /* file descriptors */
    def fin    : @FILE;
    def fout   : @FILE;

    /* flags/counters */
    def i      : four;
    def ret    : four;

begin

    /* read arguments */
    for (i := 0; i < argc; i++) {
        if (argv[i][0] == 'i' and
            argv[i][1] == 'n' and
            argv[i][2] == ':=') {
              /* input file */
              if_name := &argv[i][3];
        endif;
        if (argv[i][0] == 'o' and
            argv[i][1] == 'u' and
            argv[i][2] == 't' and
            argv[i][3] == ':=') {
              /* output file */
              of_name := &argv[i][4];
        endif;
    endif;
    /* arguments are valid? */
    if ! if_name or ! of_name then
        fprintf(stderr, "Usage: %s in:=<input-file> out:=<out-file>\n", argv[0]);
        return -1;
    endif;
    /* attempt to open input file */
    fin := fopen(if_name, "r");
    if ! fin then
        fprintf(stderr, "Can't open %s for read.\n", if_name);
        return -1;
    endif;
    /* attempt to open output file */
    fout := fopen(of_name, "w");
    if ! fout then
        fprintf(stderr, "Can't open %s for write.\n", of_name);
        return -1;
    endif;
    /* initialize error */
    err_init();
    /* initialize symtab */
    symtab_init();
    /* initialize input layer */
    io_init(fin);
    /* initialize output layer */
    emit_init(fout);
    /* start the parser */
    parse_file();
    /* get final error code */
    ret := get_err();
    /* close the files */
    fclose(fin);
    fclose(fout);
    /* done */
    return ret;

end;
