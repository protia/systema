#include <common.inc>

/* literal types:
 * integer literal
 * pointer literal
 * text literal
 */

#define RESB   expr@.byte_literal_val
#define RESH   expr@.half_literal_val
#define RESW   expr@.word_literal_val
#define RESD   expr@.long_literal_val

#define OP1B   op1@.byte_literal_val
#define OP1H   op1@.half_literal_val
#define OP1W   op1@.word_literal_val
#define OP1D   op1@.long_literal_val

#define OP2B   op2@.byte_literal_val
#define OP2H   op2@.half_literal_val
#define OP2W   op2@.word_literal_val
#define OP2D   op2@.long_literal_val

def literal_type_cast: func(before: @expr_t, after: @expr_t)
    def from_spec: four;
    def to_spec  : four;
    def holder   : eigh;
begin
    /* get types */
    from_spec := before@.type@.specifier;
    to_spec   := after@.type@.specifier;
    /* check types */
    if ((from_spec < TYPE_BYTE or from_spec > TYPE_DOBL) and from_spec != TYPE_PTR) or
       ((to_spec   < TYPE_BYTE or to_spec   > TYPE_DOBL) and to_spec   != TYPE_PTR)
    then
        print_err("unsupported types for literal casting\n", 0);
    else
        /* move from 'before' into 'holder' */
        if get_unsignedf() then
            if from_spec == TYPE_BYTE then
                unsigned(holder := before@.byte_literal_val);
            elsif from_spec == TYPE_HALF then
                unsigned(holder := before@.half_literal_val);
            elsif from_spec == TYPE_WORD then
                unsigned(holder := before@.word_literal_val);
            else
                unsigned(holder := before@.long_literal_val);
            endif;
        else
            if from_spec == TYPE_BYTE then
                holder := before@.byte_literal_val;
            elsif from_spec == TYPE_HALF then
                holder := before@.half_literal_val;
            elsif from_spec == TYPE_WORD then
                holder := before@.word_literal_val;
            else
                holder := before@.long_literal_val;
            endif;
        endif;
        /* move from 'holder' into 'after' */
        if to_spec == TYPE_BYTE then
            after@.byte_literal_val := holder;
        elsif to_spec == TYPE_HALF then
            after@.half_literal_val := holder;
        elsif to_spec == TYPE_WORD then
            after@.word_literal_val := holder;
        else
            after@.long_literal_val := holder;
        endif;
    endif;
end;

def literal_do_unary: func(expr: @expr_t, op: @[byte], op1: @expr_t)
begin
    /* expects expr to be already initialized with the target type */
    if ! strcmp(op, "! ") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := !OP1B;
            when TYPE_HALF: RESH := !OP1H;
            when TYPE_WORD: RESW := !OP1W;
            when TYPE_DOBL: RESD := !OP1D;
            when TYPE_PTR:  RESD := !OP1D;
        esac;
    elsif ! strcmp(op, "~") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := ~OP1B;
            when TYPE_HALF: RESH := ~OP1H;
            when TYPE_WORD: RESW := ~OP1W;
            when TYPE_DOBL: RESD := ~OP1D;
            when TYPE_PTR:  RESD := ~OP1D;
        esac;
    else
        print_err("<bug>: literal_do_unary() invalid op\n", 0);
    endif;
end;

def literal_do_binary: func(expr: @expr_t,
                            op1 : @expr_t,
                            op  : @[byte],
                            op2 : @expr_t)
begin

    /* expects op1 and op2 to be of the same type,
     * and expr to be already initialized with the target type
     */

    if ! strcmp(op, "+") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B + OP2B;
            when TYPE_HALF: RESH := OP1H + OP2H;
            when TYPE_WORD: RESW := OP1W + OP2W;
            when TYPE_DOBL: RESD := OP1D + OP2D;
            when TYPE_PTR:  RESD := OP1D + OP2D;
        esac;
    elsif ! strcmp(op, "-") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B - OP2B;
            when TYPE_HALF: RESH := OP1H - OP2H;
            when TYPE_WORD: RESW := OP1W - OP2W;
            when TYPE_DOBL: RESD := OP1D - OP2D;
            when TYPE_PTR:  RESD := OP1D - OP2D;
        esac;
    elsif ! strcmp(op, "*") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B * OP2B;
            when TYPE_HALF: RESH := OP1H * OP2H;
            when TYPE_WORD: RESW := OP1W * OP2W;
            when TYPE_DOBL: RESD := OP1D * OP2D;
            when TYPE_PTR:  RESD := OP1D * OP2D;
        esac;
    elsif ! strcmp(op, "/") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B / OP2B;
            when TYPE_HALF: RESH := OP1H / OP2H;
            when TYPE_WORD: RESW := OP1W / OP2W;
            when TYPE_DOBL: RESD := OP1D / OP2D;
            when TYPE_PTR:  RESD := OP1D / OP2D;
        esac;
    elsif ! strcmp(op, "%") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B % OP2B;
            when TYPE_HALF: RESH := OP1H % OP2H;
            when TYPE_WORD: RESW := OP1W % OP2W;
            when TYPE_DOBL: RESD := OP1D % OP2D;
            when TYPE_PTR:  RESD := OP1D % OP2D;
        esac;
    elsif ! strcmp(op, ":=") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B == OP2B;
            when TYPE_HALF: RESH := OP1H == OP2H;
            when TYPE_WORD: RESW := OP1W == OP2W;
            when TYPE_DOBL: RESD := OP1D == OP2D;
            when TYPE_PTR:  RESD := OP1D == OP2D;
        esac;
    elsif ! strcmp(op, "!=") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B != OP2B;
            when TYPE_HALF: RESH := OP1H != OP2H;
            when TYPE_WORD: RESW := OP1W != OP2W;
            when TYPE_DOBL: RESD := OP1D != OP2D;
            when TYPE_PTR:  RESD := OP1D != OP2D;
        esac;
    elsif ! strcmp(op, ">") then
        if get_unsignedf() then
            case op1@.type@.specifier
                when TYPE_BYTE: RESB := unsigned(OP1B > OP2B);
                when TYPE_HALF: RESH := unsigned(OP1H > OP2H);
                when TYPE_WORD: RESW := unsigned(OP1W > OP2W);
                when TYPE_DOBL: RESD := unsigned(OP1D > OP2D);
                when TYPE_PTR:  RESD := unsigned(OP1D > OP2D);
            esac;
        else
            case op1@.type@.specifier
                when TYPE_BYTE: RESB := OP1B > OP2B;
                when TYPE_HALF: RESH := OP1H > OP2H;
                when TYPE_WORD: RESW := OP1W > OP2W;
                when TYPE_DOBL: RESD := OP1D > OP2D;
                when TYPE_PTR:  RESD := OP1D > OP2D;
            esac;
        endif;
    elsif ! strcmp(op, ">=") then
        if get_unsignedf() then
            case op1@.type@.specifier
                when TYPE_BYTE: RESB := unsigned(OP1B >= OP2B);
                when TYPE_HALF: RESH := unsigned(OP1H >= OP2H);
                when TYPE_WORD: RESW := unsigned(OP1W >= OP2W);
                when TYPE_DOBL: RESD := unsigned(OP1D >= OP2D);
                when TYPE_PTR:  RESD := unsigned(OP1D >= OP2D);
            esac;
        else
            case op1@.type@.specifier
                when TYPE_BYTE: RESB := OP1B >= OP2B;
                when TYPE_HALF: RESH := OP1H >= OP2H;
                when TYPE_WORD: RESW := OP1W >= OP2W;
                when TYPE_DOBL: RESD := OP1D >= OP2D;
                when TYPE_PTR:  RESD := OP1D >= OP2D;
            esac;
        endif;
    elsif ! strcmp(op, "<") then
        if get_unsignedf() then
            case op1@.type@.specifier
                when TYPE_BYTE: unsigned(RESB := OP1B < OP2B);
                when TYPE_HALF: unsigned(RESH := OP1H < OP2H);
                when TYPE_WORD: unsigned(RESW := OP1W < OP2W);
                when TYPE_DOBL: unsigned(RESD := OP1D < OP2D);
                when TYPE_PTR:  unsigned(RESD := OP1D < OP2D);
            esac;
        else
            case op1@.type@.specifier
                when TYPE_BYTE: RESB := OP1B < OP2B;
                when TYPE_HALF: RESH := OP1H < OP2H;
                when TYPE_WORD: RESW := OP1W < OP2W;
                when TYPE_DOBL: RESD := OP1D < OP2D;
                when TYPE_PTR:  RESD := OP1D < OP2D;
            esac;
        endif;
    elsif ! strcmp(op, "<=") then
        if get_unsignedf() then
            case op1@.type@.specifier
                when TYPE_BYTE: RESB := unsigned(OP1B <= OP2B);
                when TYPE_HALF: RESH := unsigned(OP1H <= OP2H);
                when TYPE_WORD: RESW := unsigned(OP1W <= OP2W);
                when TYPE_DOBL: RESD := unsigned(OP1D <= OP2D);
                when TYPE_PTR:  RESD := unsigned(OP1D <= OP2D);
            esac;
        else
            case op1@.type@.specifier
                when TYPE_BYTE: RESB := OP1B <= OP2B;
                when TYPE_HALF: RESH := OP1H <= OP2H;
                when TYPE_WORD: RESW := OP1W <= OP2W;
                when TYPE_DOBL: RESD := OP1D <= OP2D;
                when TYPE_PTR:  RESD := OP1D <= OP2D;
            esac;
        endif;
    elsif !strcmp(op, "|") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B | OP2B;
            when TYPE_HALF: RESH := OP1H | OP2H;
            when TYPE_WORD: RESW := OP1W | OP2W;
            when TYPE_DOBL: RESD := OP1D | OP2D;
            when TYPE_PTR:  RESD := OP1D | OP2D;
        esac;
    elsif ! strcmp(op, "&") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B & OP2B;
            when TYPE_HALF: RESH := OP1H & OP2H;
            when TYPE_WORD: RESW := OP1W & OP2W;
            when TYPE_DOBL: RESD := OP1D & OP2D;
            when TYPE_PTR:  RESD := OP1D & OP2D;
        esac;
    elsif ! strcmp(op, "^") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B ^ OP2B;
            when TYPE_HALF: RESH := OP1H ^ OP2H;
            when TYPE_WORD: RESW := OP1W ^ OP2W;
            when TYPE_DOBL: RESD := OP1D ^ OP2D;
            when TYPE_PTR:  RESD := OP1D ^ OP2D;
        esac;
    elsif ! strcmp(op, ">>") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B >> OP2B;
            when TYPE_HALF: RESH := OP1H >> OP2H;
            when TYPE_WORD: RESW := OP1W >> OP2W;
            when TYPE_DOBL: RESD := OP1D >> OP2D;
            when TYPE_PTR:  RESD := OP1D >> OP2D;
        esac;
    elsif ! strcmp(op, "<<") then
        case op1@.type@.specifier
            when TYPE_BYTE: RESB := OP1B << OP2B;
            when TYPE_HALF: RESH := OP1H << OP2H;
            when TYPE_WORD: RESW := OP1W << OP2W;
            when TYPE_DOBL: RESD := OP1D << OP2D;
            when TYPE_PTR:  RESD := OP1D << OP2D;
        esac;
    else
        print_err("<bug>: literal_do_binary() invalid op\n", 0);
    endif;
end;

def eval_literal_int: func(str: @[byte]) returns four
    def val: four;
    def i  : four;
begin
    val := 0;
    if str@[0] == '\'' then
        /* character */
        if str@[1] == '\\' then
            /* escaped */
            case str@[2]
                when 'n':
                    val := '\n';
                when 'r':
                    val := '\r';
                when 't':
                    val := '\t';
                when 'f':
                    val := '\f';
                when 'v':
                    val := '\v';
                when others:
                    val := str@[2];
            esac;
        else
            val := str@[1];
        endif;
    elsif str@[0] == '0' and (str@[1] == 'x' or str@[1] == 'X') then
        /* hexa */
        i := 2;
        while str@[i] do
            if str@[i] >= '0' and str@[i] <= '9' then
                val := val*16 + str@[i] - '0';
            elsif str@[i] >= 'A' and str@[i] <= 'F' then
                val := val*16 + str@[i] - 'A' + 10;
            else
                val := val*16 + str@[i] - 'a' + 10;
            endif;
            i++;
        loop;
    elsif str@[0] == '0' and (str@[1] == 'o' or str@[1] == 'O') then
        /* octal */
        i := 2;
        while str@[i] do
            val := val*8 + str@[i] - '0';
            i++;
        loop;
    else
        /* decimal */
        i := 0;
        while str@[i] do
            val := val*10 + str@[i] - '0';
            i++;
        loop;
    endif;
    return val;
end;
