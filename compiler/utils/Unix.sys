/* STD C Library Wrappers */

/* function declarations */
#include "Utils.inc"

/* stdlib.h */
dec malloc  : func(size: four) returns @void;

/* stdio.h */
#define stdin  __stdinp
#define stdout __stdoutp
#define stderr __stderrp
typ FILE;
dec __stdinp:  @FILE;
dec __stdoutp: @FILE;
dec __stderrp: @FILE;
dec fopen   : func(fname: @[byte], mode: @[byte]) returns @FILE;
dec fclose  : func(fd: @FILE) returns four;
dec fprintf : func(fd: @FILE, fmt: @[byte], ...) returns four;
dec sprintf : func(str: @[byte], fmt: @[byte], ...) returns four;
dec fgets   : func(str: @[byte], count: four, fd: @FILE) returns @[byte];

/* ctype.h */
dec isspace : func(chr: byte) returns four;

/* string.h */
dec strlen  : func(str: @[byte]) returns four;
dec strcpy  : func(str1: @[byte], str2: @[byte]) returns @[byte];
dec strcat  : func(str1: @[byte], str2: @[byte]) returns @[byte];
dec strcmp  : func(str1: @[byte], str2: @[byte]) returns four;
dec strtol  : func(str: @[byte], ptr: @@[byte], base: four) returns four;

/* string routines */

def UtilsStringAlloc     : func(Size:    Int32T) returns @StringT
begin
   return malloc(Size+1) as @StringT;
end;

def UtilsStringLength    : func(String:  @StringT) returns Int32T
begin
   return strlen(String);
end;

def UtilsStringToInt     : func(String:  @StringT) returns Int32T
   def nextPtr : @StringT;
begin
   return strtol(String, &nextPtr, 10);
end;

def UtilsStringFromInt   : func(String:  @StringT, Integer: Int32T) returns @StringT
begin
   sprintf(String, "%d", Integer);
   return String;
end;

def UtilsStringCopy      : func(StringDest: @StringT, StringSrc: @StringT) returns @StringT
begin
   return strcpy(StringDest, StringSrc);
end;

def UtilsStringConcatStr : func(StringDest: @StringT, StringSrc: @StringT) returns @StringT
begin
   return strcat(StringDest, StringSrc);
end;

def UtilsStringConcatDec : func(String: @StringT, Integer: Int32T) returns @StringT
begin
   sprintf(String, "%s%d", String, Integer);
   return String;
end;

def UtilsStringIsEqual   : func(String1: @StringT, String2: @StringT) returns BooleanT
begin
   return strcmp(String1, String2) == 0;
end;

/* file functions */

def UtilsFileOpen      : func(FileName: @StringT, Mode: @StringT) returns @FileDescT
begin
   return fopen(FileName, Mode);
end;

def UtilsFileClose     : func(FileDesc: @FileDescT) returns Int32T
begin
   return fclose(FileDesc);
end;

def UtilsFileRead      : func(Line: @StringT, FileDesc: @FileDescT) returns Int32T
   def ReadCount : Int32T;
begin
   if fgets(Line, 4096, FileDesc) == NULL then
      ReadCount := 0;
   else
      ReadCount := UtilsStringLength(Line);
   endif;
   return ReadCount;
end;

def UtilsFileWrite     : func(FileDesc: @FileDescT, Line: @StringT) returns Int32T
begin
   return fprintf(FileDesc, Line);
end;

/* console */
def UtilsConsoleWriteStr : func(Line: @StringT) returns Int32T
begin
   return fprintf(stdout, "%s", Line);
end;

def UtilsConsoleWriteInt : func(Integer: four) returns Int32T
begin
   return fprintf(stdout, "%d", Integer);
end;
