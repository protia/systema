/* STD C Library Wrappers */

/* function declarations */
#include "Utils.inc"

/* stdlib.h */
dec malloc  : func(size: four) returns @void;

/* stdio.h */
#define stdin  __stdinp
#define stdout __stdoutp
#define stderr __stderrp
typ FILE;
dec __stdinp:  @FILE;
dec __stdoutp: @FILE;
dec __stderrp: @FILE;
dec fopen   : func(fname: @[byte], mode: @[byte]) returns @FILE;
dec fclose  : func(fd: @FILE) returns four;
dec fprintf : func(fd: @FILE, fmt: @[byte], ...) returns four;
dec sprintf : func(str: @[byte], fmt: @[byte], ...) returns four;
dec fgets   : func(str: @[byte], count: four, fd: @FILE) returns @[byte];

/* ctype.h */
dec isspace : func(chr: byte) returns four;

/* string.h */
dec strlen  : func(str: @[byte]) returns four;
dec strcpy  : func(str1: @[byte], str2: @[byte]) returns @[byte];
dec strcat  : func(str1: @[byte], str2: @[byte]) returns @[byte];
dec strcmp  : func(str1: @[byte], str2: @[byte]) returns four;
dec strtol  : func(str: @[byte], ptr: @@[byte], base: four) returns four;

/* init function */
dec Init: func();

/* command-line arguments */
typ ArgumentT: record
(
   Name:  @StringT,
   Value: @StringT,
   Next:  @ArgumentT
);

def FirstArg: @ArgumentT;
def LastArg: @ArgumentT;

/* memory */
def UtilsMemAlloc: func(Size: Int32T) returns @void
begin
   return malloc(Size) as @void;
end;

/* string routines */
def UtilsStringAlloc     : func(Size:    Int32T) returns @StringT
begin
   return malloc(Size+1) as @StringT;
end;

def UtilsStringLength    : func(String:  @StringT) returns Int32T
begin
   return strlen(String);
end;

def UtilsStringToInt     : func(String:  @StringT) returns Int32T
   def nextPtr : @StringT;
begin
   return strtol(String, &nextPtr, 10);
end;

def UtilsStringFromInt   : func(String:  @StringT, Integer: Int32T) returns @StringT
begin
   sprintf(String, "%d", Integer);
   return String;
end;

def UtilsStringCopy      : func(StringDest: @StringT, StringSrc: @StringT) returns @StringT
begin
   return strcpy(StringDest, StringSrc);
end;

def UtilsStringConcatStr : func(StringDest: @StringT, StringSrc: @StringT) returns @StringT
begin
   return strcat(StringDest, StringSrc);
end;

def UtilsStringConcatDec : func(String: @StringT, Integer: Int32T) returns @StringT
begin
   sprintf(String, "%s%d", String, Integer);
   return String;
end;

def UtilsStringIsEqual   : func(String1: @StringT, String2: @StringT) returns BooleanT
begin
   return strcmp(String1, String2) == 0;
end;

/* file functions */

def UtilsFileOpen      : func(FileName: @StringT, Mode: @StringT) returns @FileDescT
begin
   return fopen(FileName, Mode);
end;

def UtilsFileClose     : func(FileDesc: @FileDescT) returns Int32T
begin
   return fclose(FileDesc);
end;

def UtilsFileRead      : func(Line: @StringT, FileDesc: @FileDescT) returns Int32T
   def ReadCount : Int32T;
begin
   if fgets(Line, 4096, FileDesc) == NULL then
      ReadCount := 0;
   else
      ReadCount := UtilsStringLength(Line);
   endif;
   return ReadCount;
end;

def UtilsFileWrite     : func(FileDesc: @FileDescT, Line: @StringT) returns Int32T
begin
   return fprintf(FileDesc, Line);
end;

/* console */
def UtilsConsoleWriteStr : func(Line: @StringT) returns Int32T
begin
   return fprintf(stdout, "%s", Line);
end;

def UtilsConsoleWriteInt : func(Integer: four) returns Int32T
begin
   return fprintf(stdout, "%d", Integer);
end;

/* unix arguments --> protia environment */
def UtilsEnvironGet: func(ArgName: @StringT) returns @StringT
   def CurArg : @ArgumentT;
   def RetVal : @StringT;
   def Done   : BooleanT;
begin
   CurArg := FirstArg;
   Done := FALSE;
   while Done == FALSE and CurArg != NULL do
      if UtilsStringIsEqual(CurArg@.Name, ArgName) then
         Done := TRUE;
      else
         CurArg := CurArg@.Next;
      endif;
   loop;
   if CurArg != NULL then
      RetVal := CurArg@.Value;
   else
      RetVal := "";
   endif;
   return RetVal;
end;

def UtilsEnvironSet: func(ArgName: @StringT, ArgValue: @StringT)
   def CurArg : @ArgumentT;
   def Done   : BooleanT;
begin
   CurArg := FirstArg;
   Done := FALSE;
   while Done == FALSE and CurArg != NULL do
      if UtilsStringIsEqual(CurArg@.Name, ArgName) then
         Done := TRUE;
      else
         CurArg := CurArg@.Next;
      endif;
   loop;
   if CurArg == NULL then
      CurArg := UtilsMemAlloc(sizeof(ArgumentT));
      CurArg@.Name  := ArgName;
      CurArg@.Value := ArgValue;
      CurArg@.Next  := NULL;
      if FirstArg == NULL then
         FirstArg := CurArg;
         LastArg  := CurArg;
      else
         LastArg@.Next := CurArg;
         LastArg := CurArg;
      endif;
   endif;
end;

/* unix main */
def main: func(argc: Int32T, argv: @[@StringT]) returns Int32T
   def ArgName  : @StringT;
   def ArgValue : @StringT;
   def I        : Int32T;
   def J        : Int32T;
   def K        : Int32T;
   def RetVal   : Int32T;
begin
   /* initialize argument linked list */
   FirstArg := NULL;
   LastArg  := NULL;
   /* loop over arguments */
   I := 1;
   while I < argc do
      /* look for '=' */
      J := 0;
      while argv@[I]@[J] != '=' and argv@[I]@[J] != 0 do
         J++;
      loop;
      /* copy everything before J */
      ArgName := UtilsStringAlloc(J);
      K := 0;
      while K < J do
         ArgName@[K] := argv@[I]@[K];
         K++;
      loop;
      ArgName@[K] := 0;
      /* copy value */
      if argv@[I]@[J] == '=' then
         ArgValue := &argv@[I]@[J+1] as @StringT;
      else
         ArgValue := "yes";
      endif;
      /* add the argument to the linked list */
      UtilsEnvironSet(ArgName, ArgValue);
      /* next agument */
      I++;
   loop;

   /* call init function */
   Init();

   /* error? */
   if UtilsStringIsEqual(UtilsEnvironGet("err"), "") then
      RetVal := 0;
   else
      RetVal := -1;
   endif;

   /* done */
   return RetVal;

end;
